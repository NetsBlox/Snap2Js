const SPromise = __ENV.SPromise;

class Variable {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
}

class VariableFrame {
    constructor(parent) {
        this.parent = parent;
        this.vars = {};
    }

    get(name, silent) {
        let result = null;
        if (this.vars[name]) {
            result = this.vars[name];
        } else if (this.parent) {
            result = this.parent.get(name, silent);
        }
        if (result === null && !silent) throw new Error('a variable of name \''+name+'\' does not exist in this context');
        return result;
    }

    set(name, value) {
        this.vars[name] = new Variable(name, value);
    }
}

class Stage {
    constructor(name, variables, customBlocks) {
        this.name = name;
        this.variables = new VariableFrame(variables);
        this.customBlocks = new VariableFrame(project.customBlocks);
        this.isSprite = false;
        this.variables.set('__SELF', this);
    }

    onFlagPressed() {
    }

    onUserEventReceived (event) {
    }

    emit(event, wait) {
        if (wait) {
            project.sprites.concat([project.stage])
                .forEach(obj => obj.onUserEventReceived(event));
        } else {
            setTimeout(() => {
                project.sprites.concat([project.stage])
                    .forEach(obj => obj.onUserEventReceived(event));
            }, 0);
        }
    }

    getTimerStart() {
        return project.timerStart;
    }

    resetTimer() {
        project.timerStart = Date.now();
    }

    getTempo() {
        return project.tempo;
    }

    setTempo(bpm) {
        return project.tempo = Math.max(20, (+bpm || 0));
    }
}

class Sprite extends Stage {
    constructor(name, variables, customBlocks) {
        super(name, variables, customBlocks);
        this.clones = [];
        this.isSprite = true;
        this.xPosition = 0;
        this.yPosition = 0;
        this.direction = 90;
        this.costume = 0;
        this.size = 100;
        this.project = project;
    }

    clone() {
        let clone = Object.create(this);
        this.clones.push(clone);
        setTimeout(() => clone.onCloneStart(), 0);
    }
}

__ENV = __ENV || this;
var project = {
    variables: new VariableFrame(),
    customBlocks: new VariableFrame(),
    timerStart: null,
    tempo: <%= tempo %>,
    sprites: []
};
<% Object.keys(variables).forEach(function(variable) { %>
project.variables.set('<%= variable %>', JSON.parse(<%= JSON.stringify(JSON.stringify(variables[variable])) %>));<% }) %>
<% customBlocks.forEach(function(def) { %>
project.customBlocks.set('<%= def.name %>', <%= def.code %>);
<% }) %>

project.stage = new Stage('<%= stage.name %>', project.variables, project.customBlocks);

<% stage.customBlocks.forEach(function(def) { %>
project.stage.customBlocks.set('<%= def.name %>', <%= def.code %>);
<% }) %>

project.stage.onFlagPressed = function() {
    var self = this;
<%
(stage.scripts.receiveGo || [])
    .forEach(function(code) {
%>
    <%= code %>

<%
});
%>
};

project.stage.onUserEventReceived = function(event) {
    var self = this;

<%
(stage.scripts.receiveMessage || [])
    .forEach(function(code) {
%>
    <%= code %>

<%
});
%>
};

project.stage.onKeyPressed = function(key) {
    var self = this;
<%
(stage.scripts.receiveKey || [])
    .forEach(function(code) {
%>
    <%= code %>

<%
});
%>
};


// for each sprite...
var sprite;
<% sprites.forEach(function(rawSprite) { %>
sprite = new Sprite('<%= rawSprite.name %>', project.variables, project.customBlocks);
sprite.xPosition = <%= rawSprite.position.x %>;
sprite.yPosition = <%= rawSprite.position.y %>;
sprite.direction = <%= rawSprite.direction %>;
sprite.draggable = <%= rawSprite.draggable %>;
sprite.rotation = <%= rawSprite.rotation %>;
sprite.size = <%= rawSprite.size %>;
sprite.costumeIdx = <%= rawSprite.costumeIdx %>;
<% rawSprite.customBlocks.forEach(function(def) { %>
sprite.customBlocks.set('<%= def.name %>', <%= def.code %>);
<% }) %>
<% Object.keys(rawSprite.variables).forEach(function(variable) { %>
sprite.variables.set('<%= variable %>', JSON.parse('<%= JSON.stringify(rawSprite.variables[variable]) %>'));<% }) %>

sprite.onFlagPressed = function() {
    var self = this;
<%
(rawSprite.scripts.receiveGo || [])
    .forEach(function(code) {
%>
    <%= code %>

<%
});
%>
};

sprite.onKeyPressed = function(key) {
    var self = this;
<%
(rawSprite.scripts.receiveKey || [])
    .forEach(function(code) {
%>
    <%= code %>

<%
});
%>
};

sprite.onUserEventReceived = function(event) {
    var self = this;

<%
(rawSprite.scripts.receiveMessage || [])
    .forEach(function(code) {
%>
    <%= code %>

<%
});
%>

};

sprite.onCloneStart = function(event) {
    var self = this;
<%
(rawSprite.scripts.receiveOnClone || [])
    .forEach(function(code) {
%>
    <%= code %>

<%
});
%>
};

sprite.onEventReceived = function(event) {
    var self = this;

    if (event === 'clicked') {
        // Add code for the given event...
        // TODO
    }
};

sprite.checkConditions = function() {
    var self = this;

    // TODO: add arbitrary hat block code here
};

project.sprites.push(sprite);
<% }) %>
project.timerStart = Date.now();
__ENV.__start(project, __ENV);

function callMaybeAsync(self, fn) {
    let args = [].slice.call(arguments, 2);

    // Wait for any args to resolve
    let result = __ENV.SPromise.all(args);

    result = result.then(args => fn.apply(self, args));

    return result;
}
callMaybeAsync = __ENV.callMaybeAsync || callMaybeAsync;

<%= initCode %>

<% // This only executes if there is not context...? %>
<% // This should be the default fn to call when this runs... %>
<% // or should this  %>
<% if (returnValue) { %>
return <%= returnValue %>;
<% } else { %>
project.sprites.forEach(sprite => sprite.onFlagPressed());
project.stage.onFlagPressed();
<% } %>
