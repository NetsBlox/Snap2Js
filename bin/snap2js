#!/usr/bin/env node

const prog = require('caporal');
const version = require('../package.json');
const snap2js = require('..');
const Q = require('q');
const path = require('path');
const fs = require('fs');
const exists = require('exists-file');

// TODO: add context options?
prog
    .version(version)
    .description('A tool to compile Snap! xml files to JavaScript')
    .argument('<files...>', 'Snap xml files to compile')
    .option('--output <dir>', 'Output directory', fileExists, '.')
    .option('--context <type>', 'Context to use', isContext, 'default')
    .action((args, opts, logger) => {
        return Q.all(args.files.map(filename => compileFile(filename, opts, logger)));
    });

function compileFile(filename, opts, logger) {
    let outfile = path.join(opts.output, path.basename(filename).replace(/\.[a-zA-Z0-9]+$/, '.js'));
    let context = opts.context;

    logger.debug('compiling ' + filename + ' to ' + outfile);
    return Q.ninvoke(fs, 'readFile', filename)
        .then(contents => snap2js.transpile(contents))
        .then(fn => {
            // FIXME: make this more generic
            var code = `(function test(__ENV) {${fn.toString()}})(require('./src/context/${context}'))`;
            return Q.ninvoke(fs, 'writeFile', outfile, code);
        })
        .then(() => logger.info('finished compiling', outfile))
        .fail(err => console.error(err));
}

function fileExists(dir) {
    dir = path.resolve(dir);
    if (!exists.sync(dir)) {
        throw new Error(`Output directory not found: ${dir}`);
    }
    return dir;
}

function isContext(name) {
    var contexts = fs.readdirSync(path.join(__dirname, '..', 'src', 'context'))
        .map(name => name.replace(/\.js$/, ''));

    var isValid = contexts.find(filename => filename === name.toLowerCase());

    if (!isValid) {
        console.log(contexts);
        throw new Error(`Invalid context: ${dir}. Expected ${contexts.join(', ')}`);
    }
    return name.toLowerCase();
}

prog.parse(process.argv);
