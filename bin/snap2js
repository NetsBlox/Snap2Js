#!/usr/bin/env node

const prog = require('caporal');
const version = require('../package.json').version;
const snap2js = require('..');
const path = require('path');
const fs = require('fs');
const exists = require('exists-file');
const browserify = require('browserify');
const BROWSERIFY_OPTS = {
    noParse: [ undefined ],
    extensions: [],
    ignoreTransform: [],
    fullPaths: false,
    builtins: false,
    commondir: false,
    bundleExternal: true,
    basedir: undefined,
    browserField: false,
    transformKey: undefined,
    dedupe: true,
    detectGlobals: true,
    insertGlobals: false,
    insertGlobalVars:
    {
        process: undefined,
        global: undefined,
        'Buffer.isBuffer': undefined,
        Buffer: undefined
    },
    ignoreMissing: false,
    debug: false,
    standalone: undefined
};
const {promisify} = require('util');
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

prog
    .version(version)
    .description('A tool to compile Snap! xml files to JavaScript')
    .argument('<files...>', 'Snap xml files to compile')
    .option('-i,--interpret')
    .option(
        '--args [inputs]',
        'Comma separated list of arguments (if interpreting a serialized function)'
    )
    .option('--output <dir>', 'Output directory', fileExists, '.')
    .option('--context <type>', 'Context to use', isContext, 'basic')
    .action((args, opts, logger) => {
        if (opts.interpret) {
            if (args.files.length > 1) logger.warn(`Only interpretting ${args.files[0]}`)
            return interpretFile(args.files[0], opts, logger);
        } else {
            return Promise.all(args.files.map(filename => saveToFile(filename, opts, logger)));
        }
    });

async function compileFile(filename, opts, logger) {
    const contents = await readFile(filename)
    return snap2js.transpile(contents);
}

async function saveToFile(filename, opts, logger) {
    const outfile = path.join(opts.output, path.basename(filename).replace(/\.[a-zA-Z0-9]+$/, '.js'));
    const tmpfile = outfile + '.tmp';
    const context = opts.context;

    logger.debug('compiling ' + filename + ' to ' + outfile);
    const fn = await compileFile(filename, opts, logger);
    const relPath = path.resolve(`${path.dirname(__dirname)}/src/context/${context}`);
    const contextPath = path.relative(path.resolve(opts.output), relPath);
    const code = `(${fn.toString()})(require('./${contextPath}'))`;
    await writeFile(tmpfile, code);

    const b = browserify([tmpfile], BROWSERIFY_OPTS);
    const outputStream = fs.createWriteStream(outfile);

    b.bundle().pipe(outputStream);
    outputStream.on('error', err => logger.warn(err));

    outputStream.on('close', () => {
        logger.debug('finished compiling ' + outfile);
        logger.debug('removing ' + tmpfile);
        fs.unlinkSync(tmpfile);
    });
}

async function interpretFile(filename, opts, logger) {
    const context = opts.context;
    const contents = await readFile(filename, 'utf8');
    const fn = await snap2js.compile(contents);
    const env = require(`../src/context/${context}`);

    const result = await fn(env);
    if (isFunction(contents)) {
        const args = opts.args ? parseFnArgs(opts.args) : [];
        try {
            const fnOutput = await result.apply(null, args);
            console.log(fnOutput);
            return fnOutput;
        } catch (err) {
            console.log(err.stack);
            process.exit(1);
        }
    }
    return result;
}

function parseFnArgs(argString) {
    try {
        return JSON.parse(argString);
    } catch (err) {
        return argString.split(',');
    }
}

function isFunction(data) {
    return data.trim().startsWith('<context');
}

function fileExists(dir) {
    dir = path.resolve(dir);
    if (!exists.sync(dir)) {
        throw new Error(`Output directory not found: ${dir}`);
    }
    return dir;
}

function isContext(name) {
    var contexts = fs.readdirSync(path.join(__dirname, '..', 'src', 'context'))
        .map(name => name.replace(/\.js$/, ''));

    var isValid = contexts.find(filename => filename === name.toLowerCase());

    if (!isValid) {
        throw new Error(`Invalid context: ${dir}. Expected ${contexts.join(', ')}`);
    }
    return name.toLowerCase();
}

prog.parse(process.argv);
